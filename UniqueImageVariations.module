<?php namespace ProcessWire;

/**
 *
 * Unique Image Variations
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class UniqueImageVariations extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => "Unique Image Variations",
			'version' => '0.1.4',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/UniqueImageVariations',
			'summary' => 'Ensures that all ImageSizer options affect image variation filenames.',
			'icon' => 'picture-o',
			'autoload' => true,
			'singular' => true,
		);
	}

	/**
	 * Sharpening name to integer
	 *
	 * @var array
	 */
	protected $sharpening_values = array(
		'none' => 0,
		'soft' => 1,
		'medium' => 2,
		'strong' => 3,
	);

	/**
	 * Construct
	 */
	public function __construct() {
		// Default config
		$this->vn_options = array(
			'upscaling',
			'cropping',
			'interlace',
			'sharpening',
			'quality',
			'hidpiQuality',
			'focus',
			'focusData',
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('Pageimage::size', $this, 'addVariationSuffix');
	}

	/**
	 * Add unique suffix to variation according to ImageSizer options
	 *
	 * @param HookEvent $event
	 */
	protected function addVariationSuffix(HookEvent $event) {

		$page = $this->wire()->page;
		$width = $event->arguments(0);
		$height = $event->arguments(1);
		// Avoid needlessly generating extra admin thumbnails with focus enabled
		// For some reason admin thumbnails are generated from front-end pages also so you can't limit by template
		if(($width === 260 && !$height) || $height === 260 && !$width) return;

		$pageimage = $event->object;
		$filedata = $pageimage->filedata;

		// ImageSizer options from $options argument
		$options = $event->arguments(2);

		// If $options argument is not an array (taken from core Pageimage::size)
		if(!is_array($options)) {
			if(is_string($options)) {
				// optionally allow a string to be specified with crop direction, for shorter syntax
				if(strpos($options, ',') !== false) $options = explode(',', $options); // 30,40
				$options = array('cropping' => $options);
			} else if(is_int($options)) {
				// optionally allow an integer to be specified with quality, for shorter syntax
				$options = array('quality' => $options);
			} else if(is_bool($options)) {
				// optionally allow a boolean to be specified with upscaling toggle on/off
				$options = array('upscaling' => $options);
			} else {
				// unknown options type
				$options = array();
			}
		}

		// ImageSizer options from $config
		$config_options = $this->config->imageSizerOptions;
		if(!is_array($config_options)) $config_options = array();

		// Default relevant ImageSizer options
		$default_options = array(
			'upscaling' => true,
			'cropping' => true,
			'interlace' => false,
			'sharpening' => 'soft',
			'quality' => 90,
			'hidpiQuality' => 40,
			'focus' => true,
			'suffix' => array(),
		);

		// Merge the options
		$merged_options = array_merge($default_options, $config_options, $options);

		// Deal with cropping option as blank string
		if(is_string($merged_options['cropping']) && !$merged_options['cropping']) $merged_options['cropping'] = false;

		// Variation name options from module config
		$vn_options = array_flip($this->vn_options);

		// Build identifier string
		$identifier = '';
		if(isset($vn_options['upscaling'])) $identifier .= 'u' . (int) $merged_options['upscaling'];
		if(isset($vn_options['cropping']) && $merged_options['cropping'] === false) $identifier .= 'c' . (int) $merged_options['cropping'];
		if(isset($vn_options['interlace'])) $identifier .= 'i' . (int) $merged_options['interlace'];
		if(isset($vn_options['sharpening'])) {
			if(isset($this->sharpening_values[$merged_options['sharpening']])) {
				$sharpening = $this->sharpening_values[$merged_options['sharpening']];
			} else {
				// Invalid sharpening value
				$sharpening = '_';
			}
			$identifier .= 's' . $sharpening;
		}
		if(isset($vn_options['quality'])) $identifier .= 'q' . (int) $merged_options['quality'];
		if(isset($vn_options['hidpiQuality']) && !empty($merged_options['hidpi'])) $identifier .= 'hq' . (int) $merged_options['hidpiQuality'];
		$focus = (int) $merged_options['focus'];
		if(isset($vn_options['focus'])) $identifier .= 'f' . $focus;

		// Add focus data if present
		if($focus && isset($vn_options['focusData']) && !empty($filedata['focus'])) {
			$identifier .=
				't' . $filedata['focus']['top'] * 10 .
				'l' . $filedata['focus']['left'] * 10 .
				'z' . $filedata['focus']['zoom'];
		}

		// Ensure suffix is an array
		$suffix = $merged_options['suffix'];
		if(!is_array($suffix)) $suffix = explode(' ', $suffix);

		// Add identifier to suffix
		$suffix[] = $identifier;

		// Set suffix back to $options
		$options['suffix'] = $suffix;

		// Set method argument
		$event->arguments(2, $options);

	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {

		$sizer_options = array(
			'upscaling' => $this->_('Upscaling'),
			'cropping' => $this->_('Cropping (when set to false or blank string)'),
			'interlace' => $this->_('Interlace'),
			'sharpening' => $this->_('Sharpening'),
			'quality' => $this->_('Quality'),
			'hidpiQuality' => $this->_('HiDPI quality'),
			'focus' => $this->_('Use focus'),
			'focusData' => $this->_('Focus data'),
		);

		/* @var InputfieldCheckboxes $f */
		$f = $this->modules->InputfieldCheckboxes;
		$f_name = 'vn_options';
		$f->name = $f_name;
		$f->label = $this->_('ImageSizer options to include in variation names');
		$f->description = $this->_('Warning: changing these settings will result in all image variations on the website being regenerated.');
		foreach($sizer_options as $key => $value) {
			$f->addOption($key, $value);
		}
		$f->value = $this->$f_name;
		$inputfields->add($f);

	}

}
